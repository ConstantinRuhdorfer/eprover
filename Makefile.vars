#- -*-Mode: Makefile;-*- ------------------------------------------------
#
# File  : Makefile.vars
#
#  Makefile-definitions common to all CLIB-Makefiles
#
# Author: Stephan Schulz
#
# Changes
#
# <1> Sun Jul  6 22:55:11 MET DST 1997
#     New
#
#------------------------------------------------------------------------

# EXECPATH is where make install-exec will move the more important
# executables. Edit it to point to wherever you want them to live.

EXECPATH = ~/bin

# Makefile special variables
#
# If optional programs are missing on your system you can define the
# variables to "echo". Standard Installation and use should be
# unaffected, but certain services or non-essential parts will not be
# available.

SHELL      = /bin/sh
MAKE       = make      # Should also work with GNU make
AR         = ar -rcs
TAR        = tar       # Optional, for building distributions
GZIP       = gzip
MCOPY      = mcopy     # Optional, for building floppy disks
LN         = ln -s     # You can use cp or hard links if your
                       # system does not support symbolic links
LATEX      = latex     # Optional if you don't want or need the
                       # documentation. This needs to be latex2e (or
                       # perhaps later), latex 2.09 wont work.
BIBTEX     = bibtex    # Optional, see above
DVIPS      = dvips     # Optional, see above


# Compile time options
# ======================

# Remove the comment from the following to enable gprof-style
#  profiling 
#  -> This will break some stuff on at least some Solaris 2.6
#     machines, which seem to lack a profiling-enabled libm. I have a
#     simple sqrt() imlementation to circumvent the problem...

PROFFLAGS  = # -pg # -DNEED_MATH_EMULATION
DEBUGGER   = # -ggdb

# System libraries:

LIBS = -lm

# Predefined debug levels:
#
# PP_LOWDETAILS          1   Main loop stuff
# PP_HIGHDETAILS         2   Primary subroutines in cco_proofproc.c
# PP_INSERTING_NEW     128   Monitor new (and rewritten) clauses
# CO_SIMPLIFICATION      4   Control of simplification
# RW_INTERFACE_WATCH1    8   Equations and up
# RW_INTERFACE_WATCH2   16   Terms
# RW_MATCH_WATCH        32   Matches
# RW_REWRITE_WATCH      64   Rewrite steps
# PM_INPUT_PRINT       256
# PDT_INTERFACE_WATCH  512   Discrimination trees
# RPL_TERM_WATCH      2048   Term replacing

# BUILDFLAGS:
#
# PRINT_SOMEERRORS_STDOUT: Print various error messages (out of
#                          memory, empty input file) to stdout  
#                          (otherwise only to stderr) 
# P_EQUAL_INT:  Pointer has the same size as int
# P_EQUAL_LONG: Pointer has the same size as long
#               Used for fast pointer comparions (via casts). If none
#               of these is set, uses slower method of explicit
#               comparison. 
# USE_NEWMEM: Use a memory management system like everybody else,
#             using free lists filled up by allocating large blocks
#             and hacking them  into suitabe pieces. Contrary to
#             common expectations, this slows E down between 5 and 15%
#             (depending on hardware architecture and problem)
#             compared to its native memory management. It's
#             left in as a warning reminder only.
# MEASURE_EXPENSIVE: Compile counting operations and things into the
#                    code even in time-critical sections.
# PRINT_SHARING: Determine and print the sharing factor of the proof
#                state for each clause activation. 
# PRINT_RW_STATE: Dump R,E,NEW in each loop traversal.
#
# SAFELOGIC: Compile in proprietary extensions by or for Safelogic
#            A.B. (yes, they have a special license to allow this)
# FULL_MEM_STATS: Print size of the most important data types and
#                 information about allocated memory. 
# CONSTANT_MEM_ESTIMATE: Use normalized portable data type estimates
#                        instead of sizeof() to get actual machine data 
#                        sizes. Necessary to make the prover behave _exactly_
#                        the same on different machines, but makes memory 
#                        estimation worse on most machines!

SAFELOGIC  = 
BUILDFLAGS = -DPRINT_SOMEERRORS_STDOUT \
             -DP_EQUAL_INT \
             -DMEMORY_RESERVE_PARANOID \
             -DPRINT_TSTP_STATUS\
             # -DFULL_MEM_STATS\
             # -DSAFELOGIC \
	     # -DPRINT_RW_STATE # -DMEASURE_EXPENSIVE

DEBUGLEVEL = # -DDEBUGLEVEL="(RW_INTERFACE_WATCH2)"

# The next two flags are dependend - you can only have CLB_MEMORY_DEBUG
# if you don't have NDEBUG!
MEMDEBUG   = # -DCLB_MEMORY_DEBUG # -DCLB_MEMORY_DEBUG2
NODEBUG    = -DNDEBUG -DFAST_EXIT
DEBUGFLAGS = $(PROFFLAGS) $(DEBUGLEVEL) $(MEMDEBUG) $(DEBUGGER) \
             $(NODEBUG)

ARCHFLAGS  =  # -mcpu=v8 -mtune=ultrasparc # Somewhat better than
                                           # without, v9 is 
                                           # worse (!), ultrasparc does
                                           # not work at all (probably
                                           # due to 64 bit include files
                                           # or something...) 
# ARCHFLAGS   = -march=i686  # No detectable improvement

# CFLAGS for different setups:
# 
# Solaris/Linux with gcc
#
#CFLAGS     = -O6 -Wall -Wno-char-subscripts -Wshadow -ansi \
#             -pedantic -I../include $(DEBUGFLAGS) \
#             $(BUILDFLAGS) $(ARCHFLAGS)

CFLAGS     = -O6 -fomit-frame-pointer -Wall -Wno-char-subscripts -ansi \
             -I../include $(DEBUGFLAGS) \
             $(BUILDFLAGS) $(ARCHFLAGS)


# Version for profiling

#CFLAGS     = -O6 -Wall -Wno-char-subscripts -ansi \
#             -I../include $(DEBUGFLAGS) \
#             $(BUILDFLAGS) $(ARCHFLAGS)

# Workaround for broken Red Hat gcc 2.96 (hah!)

# CFLAGS     = -O6 -fno-strength-reduce -Wall -Wno-char-subscripts -Wshadow -ansi \
#             -pedantic -I../include $(DEBUGFLAGS) \
#             $(BUILDFLAGS) $(ARCHFLAGS)
#
# Solaris with SUN's SUNPro cc
# CFLAGS     = -fast -I../include $(BUILDFLAGS) $(DEBUGFLAGS) -D__inline__=""
#
# HPUX with gcc - someone please hurt an HP employee for me!
#
# CFLAGS     = -O6 -Wall -Wno-char-subscripts -Wshadow \
#             -I../include $(DEBUGFLAGS) \
#             $(BUILDFLAGS) $(ARCHFLAGS) -DHP_UX


LDFLAGS    = $(PROFFLAGS) $(DEBUGGER) $(LIBS) 
CC         = gcc
# CC         = cc
LD         = $(CC) $(LDFLAGS)

# Both makedepend and a good C compiler can be used to generate
# dependencies. gcc does a better job than makedepend, so it is the
# default. 
#
# MAKEDEPEND = echo "" > Makefile.dependencies; makedepend -- $(CFLAGS) -- -f Makefile.dependencies *.c
MAKEDEPEND = gcc -M $(CFLAGS) *.c > Makefile.dependencies




