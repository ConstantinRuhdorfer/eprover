%--------------------------------------------------------------------------
% File     : NLP196-1 : TPTP v2.4.1. Released v2.4.0.
% Domain   : Natural Language Processing
% Problem  : An old dirty white Chevy, problem 83
% Version  : [Bos00b] axioms.
% English  : Eliminating logically equivalent interpretations in the statement
%            "An old dirty white chevy barrels down a lonely street in 
%            hollywood. Two young fellas are in the front seat. They are 
%            wearing cheap black coats. Jules is behind the wheel."

% Refs     : [Bos00a] Bos (2000), DORIS: Discourse Oriented Representation a
%            [Bos00b] Bos (2000), Applied Theorem Proving - Natural Language
% Source   : [TPTP]
% Names    : 

% Status   : satisfiable
% Rating   : 0.67 v2.4.0
% Syntax   : Number of clauses    :   92 (  39 non-Horn;   2 unit;  78 RR)
%            Number of literals   :  345 (   0 equality)
%            Maximal clause size  :   36 (   3 average)
%            Number of predicates :   40 (   1 propositional; 0-4 arity)
%            Number of functors   :   34 (  25 constant; 0-3 arity)
%            Number of variables  :  144 (  29 singleton)
%            Maximal term depth   :    2 (   1 average)

% Comments : Created from NLP196+1.p using FLOTTER
%          : tptp2X -f tptp -t rm_equality:rstfp NLP196-1.p 
%--------------------------------------------------------------------------
input_clause(clause1,conjecture,
    [++ actual_world(skc73)]).

input_clause(clause2,conjecture,
    [++ actual_world(skc25)]).

input_clause(clause3,conjecture,
    [++ ssSkC0,
     ++ barrel(skc73, skc81)]).

input_clause(clause4,conjecture,
    [++ ssSkC0,
     ++ present(skc73, skc81)]).

input_clause(clause5,conjecture,
    [++ ssSkC0,
     ++ event(skc73, skc81)]).

input_clause(clause6,conjecture,
    [++ ssSkC0,
     ++ chevy(skc73, skc84)]).

input_clause(clause7,conjecture,
    [++ ssSkC0,
     ++ white(skc73, skc84)]).

input_clause(clause8,conjecture,
    [++ ssSkC0,
     ++ dirty(skc73, skc84)]).

input_clause(clause9,conjecture,
    [++ ssSkC0,
     ++ old(skc73, skc84)]).

input_clause(clause10,conjecture,
    [++ ssSkC0,
     ++ city(skc73, skc82)]).

input_clause(clause11,conjecture,
    [++ ssSkC0,
     ++ street(skc73, skc82)]).

input_clause(clause12,conjecture,
    [++ ssSkC0,
     ++ lonely(skc73, skc82)]).

input_clause(clause13,conjecture,
    [++ ssSkC0,
     ++ placename(skc73, skc83)]).

input_clause(clause14,conjecture,
    [++ ssSkC0,
     ++ hollywood_placename(skc73, skc83)]).

input_clause(clause15,conjecture,
    [++ ssSkC0,
     ++ group(skc73, skc78)]).

input_clause(clause16,conjecture,
    [++ ssSkC0,
     ++ two(skc73, skc79)]).

input_clause(clause17,conjecture,
    [++ ssSkC0,
     ++ group(skc73, skc79)]).

input_clause(clause18,conjecture,
    [++ ssSkC0,
     ++ ssSkP0(skc79, skc73)]).

input_clause(clause19,conjecture,
    [++ ssSkC0,
     ++ frontseat(skc73, skc80)]).

input_clause(clause20,conjecture,
    [++ ssSkC0,
     ++ wheel(skc73, skc74)]).

input_clause(clause21,conjecture,
    [++ ssSkC0,
     ++ jules_forename(skc73, skc76)]).

input_clause(clause22,conjecture,
    [++ ssSkC0,
     ++ forename(skc73, skc76)]).

input_clause(clause23,conjecture,
    [++ ssSkC0,
     ++ man(skc73, skc77)]).

input_clause(clause24,conjecture,
    [++ ssSkC0,
     ++ state(skc73, skc75)]).

input_clause(clause25,conjecture,
    [-- ssSkC0,
     ++ event(skc25, skc34)]).

input_clause(clause26,conjecture,
    [-- ssSkC0,
     ++ present(skc25, skc34)]).

input_clause(clause27,conjecture,
    [-- ssSkC0,
     ++ barrel(skc25, skc34)]).

input_clause(clause28,conjecture,
    [-- ssSkC0,
     ++ old(skc25, skc37)]).

input_clause(clause29,conjecture,
    [-- ssSkC0,
     ++ dirty(skc25, skc37)]).

input_clause(clause30,conjecture,
    [-- ssSkC0,
     ++ white(skc25, skc37)]).

input_clause(clause31,conjecture,
    [-- ssSkC0,
     ++ chevy(skc25, skc37)]).

input_clause(clause32,conjecture,
    [-- ssSkC0,
     ++ lonely(skc25, skc35)]).

input_clause(clause33,conjecture,
    [-- ssSkC0,
     ++ street(skc25, skc35)]).

input_clause(clause34,conjecture,
    [-- ssSkC0,
     ++ city(skc25, skc35)]).

input_clause(clause35,conjecture,
    [-- ssSkC0,
     ++ hollywood_placename(skc25, skc36)]).

input_clause(clause36,conjecture,
    [-- ssSkC0,
     ++ placename(skc25, skc36)]).

input_clause(clause37,conjecture,
    [-- ssSkC0,
     ++ group(skc25, skc31)]).

input_clause(clause38,conjecture,
    [-- ssSkC0,
     ++ ssSkP0(skc32, skc25)]).

input_clause(clause39,conjecture,
    [-- ssSkC0,
     ++ group(skc25, skc32)]).

input_clause(clause40,conjecture,
    [-- ssSkC0,
     ++ two(skc25, skc32)]).

input_clause(clause41,conjecture,
    [-- ssSkC0,
     ++ frontseat(skc25, skc33)]).

input_clause(clause42,conjecture,
    [-- ssSkC0,
     ++ wheel(skc25, skc30)]).

input_clause(clause43,conjecture,
    [-- ssSkC0,
     ++ state(skc25, skc27)]).

input_clause(clause44,conjecture,
    [-- ssSkC0,
     ++ jules_forename(skc25, skc28)]).

input_clause(clause45,conjecture,
    [-- ssSkC0,
     ++ forename(skc25, skc28)]).

input_clause(clause46,conjecture,
    [-- ssSkC0,
     ++ man(skc25, skc29)]).

input_clause(clause47,conjecture,
    [++ ssSkC0,
     ++ agent(skc73, skc81, skc84)]).

input_clause(clause48,conjecture,
    [++ ssSkC0,
     ++ down(skc73, skc81, skc82)]).

input_clause(clause49,conjecture,
    [++ ssSkC0,
     ++ in(skc73, skc81, skc82)]).

input_clause(clause50,conjecture,
    [++ ssSkC0,
     ++ of(skc73, skc83, skc82)]).

input_clause(clause51,conjecture,
    [++ ssSkC0,
     ++ ssSkP2(skc79, skc78, skc73)]).

input_clause(clause52,conjecture,
    [++ ssSkC0,
     ++ ssSkP1(skc80, skc79, skc73)]).

input_clause(clause53,conjecture,
    [++ ssSkC0,
     ++ behind(skc73, skc74, skc74)]).

input_clause(clause54,conjecture,
    [++ ssSkC0,
     ++ of(skc73, skc76, skc77)]).

input_clause(clause55,conjecture,
    [-- ssSkC0,
     ++ agent(skc25, skc34, skc37)]).

input_clause(clause56,conjecture,
    [-- ssSkC0,
     ++ in(skc25, skc34, skc35)]).

input_clause(clause57,conjecture,
    [-- ssSkC0,
     ++ down(skc25, skc34, skc35)]).

input_clause(clause58,conjecture,
    [-- ssSkC0,
     ++ of(skc25, skc36, skc35)]).

input_clause(clause59,conjecture,
    [-- ssSkC0,
     ++ ssSkP2(skc32, skc31, skc25)]).

input_clause(clause60,conjecture,
    [-- ssSkC0,
     ++ ssSkP1(skc33, skc32, skc25)]).

input_clause(clause61,conjecture,
    [-- ssSkC0,
     ++ behind(skc25, skc26, skc30)]).

input_clause(clause62,conjecture,
    [-- ssSkC0,
     ++ of(skc25, skc28, skc29)]).

input_clause(clause63,conjecture,
    [++ ssSkC0,
     ++ be(skc73, skc75, skc77, skc74)]).

input_clause(clause64,conjecture,
    [-- ssSkC0,
     ++ be(skc25, skc27, skc29, skc26)]).

input_clause(clause65,conjecture,
    [++ ssSkP0(U, V),
     ++ member(V, skf11(V, U), U)]).

input_clause(clause66,conjecture,
    [-- member(skc73, U, skc78),
     ++ ssSkC0,
     ++ coat(skc73, U)]).

input_clause(clause67,conjecture,
    [-- member(skc73, U, skc78),
     ++ ssSkC0,
     ++ black(skc73, U)]).

input_clause(clause68,conjecture,
    [-- member(skc73, U, skc78),
     ++ ssSkC0,
     ++ cheap(skc73, U)]).

input_clause(clause69,conjecture,
    [-- member(skc25, U, skc31),
     -- ssSkC0,
     ++ coat(skc25, U)]).

input_clause(clause70,conjecture,
    [-- member(skc25, U, skc31),
     -- ssSkC0,
     ++ black(skc25, U)]).

input_clause(clause71,conjecture,
    [-- member(skc25, U, skc31),
     -- ssSkC0,
     ++ cheap(skc25, U)]).

input_clause(clause72,conjecture,
    [++ ssSkP1(U, V, W),
     ++ member(W, skf16(U, W, V), V)]).

input_clause(clause73,conjecture,
    [++ ssSkP2(U, V, W),
     ++ member(W, skf21(U, W, X), U)]).

input_clause(clause74,conjecture,
    [++ ssSkP2(U, V, W),
     ++ member(W, skf19(U, W, V), V)]).

input_clause(clause75,conjecture,
    [-- member(U, V, W),
     -- ssSkP0(W, U),
     ++ fellow(U, V)]).

input_clause(clause76,conjecture,
    [-- member(U, V, W),
     -- ssSkP0(W, U),
     ++ young(U, V)]).

input_clause(clause77,conjecture,
    [-- young(U, skf11(U, V)),
     -- fellow(U, skf11(U, V)),
     ++ ssSkP0(W, U)]).

input_clause(clause78,conjecture,
    [-- member(U, V, W),
     -- ssSkP1(X, W, U),
     ++ state(U, skf13(U, Y, Z))]).

input_clause(clause79,conjecture,
    [-- member(U, V, W),
     -- ssSkP1(X, W, U),
     ++ in(U, skf12(V, U, X), X)]).

input_clause(clause80,conjecture,
    [-- member(U, V, W),
     -- ssSkP1(X, W, U),
     ++ be(U, skf13(U, Y, V), V, skf12(V, U, Y))]).

input_clause(clause81,conjecture,
    [-- member(U, V, W),
     -- member(U, X, Y),
     -- ssSkP2(W, Y, U),
     ++ wear(U, skf17(U, Z, X1))]).

input_clause(clause82,conjecture,
    [-- member(U, V, W),
     -- member(U, X, Y),
     -- ssSkP2(W, Y, U),
     ++ nonreflexive(U, skf17(U, Z, X1))]).

input_clause(clause83,conjecture,
    [-- member(U, V, W),
     -- member(U, X, Y),
     -- ssSkP2(W, Y, U),
     ++ present(U, skf17(U, Z, X1))]).

input_clause(clause84,conjecture,
    [-- member(U, V, W),
     -- member(U, X, Y),
     -- ssSkP2(W, Y, U),
     ++ event(U, skf17(U, Z, X1))]).

input_clause(clause85,conjecture,
    [-- member(U, V, W),
     -- member(U, X, Y),
     -- ssSkP2(W, Y, U),
     ++ agent(U, skf17(U, V, Z), V)]).

input_clause(clause86,conjecture,
    [-- in(U, V, W),
     -- be(U, X, skf16(W, U, Y), V),
     -- state(U, X),
     ++ ssSkP1(W, Z, U)]).

input_clause(clause87,conjecture,
    [-- member(U, V, W),
     -- member(U, X, Y),
     -- ssSkP2(W, Y, U),
     ++ patient(U, skf17(U, V, X), X)]).

input_clause(clause88,conjecture,
    [-- wear(U, V),
     -- nonreflexive(U, V),
     -- present(U, V),
     -- patient(U, V, skf19(W, U, X)),
     -- agent(U, V, skf21(W, U, X)),
     -- event(U, V),
     ++ ssSkP2(W, Y, U)]).

input_clause(clause89,conjecture,
    [-- event(U, V),
     -- present(U, V),
     -- barrel(U, V),
     -- agent(U, V, W),
     -- old(U, W),
     -- dirty(U, W),
     -- white(U, W),
     -- chevy(U, W),
     -- in(U, V, X),
     -- down(U, V, X),
     -- lonely(U, X),
     -- street(U, X),
     -- city(U, X),
     -- of(U, Y, X),
     -- hollywood_placename(U, Y),
     -- placename(U, Y),
     -- group(U, Z),
     -- ssSkP2(X1, Z, U),
     -- ssSkP0(X1, U),
     -- group(U, X1),
     -- two(U, X1),
     -- frontseat(U, X2),
     -- ssSkP1(X2, X1, U),
     -- behind(U, X3, X4),
     -- wheel(U, X4),
     -- state(U, X5),
     -- jules_forename(U, X6),
     -- forename(U, X6),
     -- be(U, X5, X7, X3),
     -- man(U, X7),
     -- of(U, X6, X7),
     -- actual_world(U),
     ++ ssSkC0,
     ++ member(U, skf23(U, Z), Z)]).

input_clause(clause90,conjecture,
    [-- barrel(U, V),
     -- present(U, V),
     -- event(U, V),
     -- chevy(U, W),
     -- white(U, W),
     -- dirty(U, W),
     -- old(U, W),
     -- agent(U, V, W),
     -- city(U, X),
     -- street(U, X),
     -- lonely(U, X),
     -- down(U, V, X),
     -- in(U, V, X),
     -- placename(U, Y),
     -- hollywood_placename(U, Y),
     -- of(U, Y, X),
     -- group(U, Z),
     -- two(U, X1),
     -- group(U, X1),
     -- ssSkP0(X1, U),
     -- ssSkP2(X1, Z, U),
     -- ssSkP1(X2, X1, U),
     -- frontseat(U, X2),
     -- behind(U, X3, X3),
     -- wheel(U, X3),
     -- jules_forename(U, X4),
     -- forename(U, X4),
     -- be(U, X5, X6, X3),
     -- man(U, X6),
     -- of(U, X4, X6),
     -- state(U, X5),
     -- actual_world(U),
     -- ssSkC0,
     ++ member(U, skf10(U, Z), Z)]).

input_clause(clause91,conjecture,
    [-- event(U, V),
     -- present(U, V),
     -- barrel(U, V),
     -- agent(U, V, W),
     -- old(U, W),
     -- dirty(U, W),
     -- white(U, W),
     -- chevy(U, W),
     -- in(U, V, X),
     -- down(U, V, X),
     -- lonely(U, X),
     -- street(U, X),
     -- city(U, X),
     -- of(U, Y, X),
     -- hollywood_placename(U, Y),
     -- placename(U, Y),
     -- group(U, Z),
     -- cheap(U, skf23(U, X1)),
     -- black(U, skf23(U, X1)),
     -- coat(U, skf23(U, X1)),
     -- ssSkP2(X2, Z, U),
     -- ssSkP0(X2, U),
     -- group(U, X2),
     -- two(U, X2),
     -- frontseat(U, X3),
     -- ssSkP1(X3, X2, U),
     -- behind(U, X4, X5),
     -- wheel(U, X5),
     -- state(U, X6),
     -- jules_forename(U, X7),
     -- forename(U, X7),
     -- be(U, X6, X8, X4),
     -- man(U, X8),
     -- of(U, X7, X8),
     -- actual_world(U),
     ++ ssSkC0]).

input_clause(clause92,conjecture,
    [-- barrel(U, V),
     -- present(U, V),
     -- event(U, V),
     -- chevy(U, W),
     -- white(U, W),
     -- dirty(U, W),
     -- old(U, W),
     -- agent(U, V, W),
     -- city(U, X),
     -- street(U, X),
     -- lonely(U, X),
     -- down(U, V, X),
     -- in(U, V, X),
     -- placename(U, Y),
     -- hollywood_placename(U, Y),
     -- of(U, Y, X),
     -- cheap(U, skf10(U, Z)),
     -- black(U, skf10(U, Z)),
     -- coat(U, skf10(U, Z)),
     -- group(U, X1),
     -- two(U, X2),
     -- group(U, X2),
     -- ssSkP0(X2, U),
     -- ssSkP2(X2, X1, U),
     -- ssSkP1(X3, X2, U),
     -- frontseat(U, X3),
     -- behind(U, X4, X4),
     -- wheel(U, X4),
     -- jules_forename(U, X5),
     -- forename(U, X5),
     -- be(U, X6, X7, X4),
     -- man(U, X7),
     -- of(U, X5, X7),
     -- state(U, X6),
     -- actual_world(U),
     -- ssSkC0]).
%--------------------------------------------------------------------------
